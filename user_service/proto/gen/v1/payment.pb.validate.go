// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: payment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PaymentInput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaymentInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaymentInputMultiError, or
// nil if none found.
func (m *PaymentInput) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProfileId() <= 0 {
		err := PaymentInputValidationError{
			field:  "ProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPaymentToken()); l < 1 || l > 255 {
		err := PaymentInputValidationError{
			field:  "PaymentToken",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsDefault

	if len(errors) > 0 {
		return PaymentInputMultiError(errors)
	}

	return nil
}

// PaymentInputMultiError is an error wrapping multiple validation errors
// returned by PaymentInput.ValidateAll() if the designated constraints aren't met.
type PaymentInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentInputMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentInputMultiError) AllErrors() []error { return m }

// PaymentInputValidationError is the validation error returned by
// PaymentInput.Validate if the designated constraints aren't met.
type PaymentInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentInputValidationError) ErrorName() string { return "PaymentInputValidationError" }

// Error satisfies the builtin error interface
func (e PaymentInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentInputValidationError{}

// Validate checks the field values on Payment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Payment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Payment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PaymentMultiError, or nil if none found.
func (m *Payment) ValidateAll() error {
	return m.validate(true)
}

func (m *Payment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	// no validation rules for ProfileId

	// no validation rules for PaymentToken

	// no validation rules for IsDefault

	if len(errors) > 0 {
		return PaymentMultiError(errors)
	}

	return nil
}

// PaymentMultiError is an error wrapping multiple validation errors returned
// by Payment.ValidateAll() if the designated constraints aren't met.
type PaymentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMultiError) AllErrors() []error { return m }

// PaymentValidationError is the validation error returned by Payment.Validate
// if the designated constraints aren't met.
type PaymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentValidationError) ErrorName() string { return "PaymentValidationError" }

// Error satisfies the builtin error interface
func (e PaymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentValidationError{}

// Validate checks the field values on ResourceID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResourceID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceIDMultiError, or
// nil if none found.
func (m *ResourceID) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ResourceIDValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResourceIDMultiError(errors)
	}

	return nil
}

// ResourceIDMultiError is an error wrapping multiple validation errors
// returned by ResourceID.ValidateAll() if the designated constraints aren't met.
type ResourceIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceIDMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceIDMultiError) AllErrors() []error { return m }

// ResourceIDValidationError is the validation error returned by
// ResourceID.Validate if the designated constraints aren't met.
type ResourceIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceIDValidationError) ErrorName() string { return "ResourceIDValidationError" }

// Error satisfies the builtin error interface
func (e ResourceIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceIDValidationError{}

// Validate checks the field values on ResourceByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceByIDRequestMultiError, or nil if none found.
func (m *ResourceByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ResourceByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResourceByIDRequestMultiError(errors)
	}

	return nil
}

// ResourceByIDRequestMultiError is an error wrapping multiple validation
// errors returned by ResourceByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type ResourceByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceByIDRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceByIDRequestMultiError) AllErrors() []error { return m }

// ResourceByIDRequestValidationError is the validation error returned by
// ResourceByIDRequest.Validate if the designated constraints aren't met.
type ResourceByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceByIDRequestValidationError) ErrorName() string {
	return "ResourceByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceByIDRequestValidationError{}

// Validate checks the field values on ListByProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListByProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListByProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListByProfileRequestMultiError, or nil if none found.
func (m *ListByProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListByProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProfileId() <= 0 {
		err := ListByProfileRequestValidationError{
			field:  "ProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListByProfileRequestMultiError(errors)
	}

	return nil
}

// ListByProfileRequestMultiError is an error wrapping multiple validation
// errors returned by ListByProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type ListByProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListByProfileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListByProfileRequestMultiError) AllErrors() []error { return m }

// ListByProfileRequestValidationError is the validation error returned by
// ListByProfileRequest.Validate if the designated constraints aren't met.
type ListByProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListByProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListByProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListByProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListByProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListByProfileRequestValidationError) ErrorName() string {
	return "ListByProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListByProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListByProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListByProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListByProfileRequestValidationError{}

// Validate checks the field values on ListPaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPaymentResponseMultiError, or nil if none found.
func (m *ListPaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetS() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPaymentResponseValidationError{
						field:  fmt.Sprintf("S[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPaymentResponseValidationError{
						field:  fmt.Sprintf("S[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPaymentResponseValidationError{
					field:  fmt.Sprintf("S[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPaymentResponseMultiError(errors)
	}

	return nil
}

// ListPaymentResponseMultiError is an error wrapping multiple validation
// errors returned by ListPaymentResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPaymentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPaymentResponseMultiError) AllErrors() []error { return m }

// ListPaymentResponseValidationError is the validation error returned by
// ListPaymentResponse.Validate if the designated constraints aren't met.
type ListPaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPaymentResponseValidationError) ErrorName() string {
	return "ListPaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPaymentResponseValidationError{}

// Validate checks the field values on SetDefaultPaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDefaultPaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDefaultPaymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDefaultPaymentRequestMultiError, or nil if none found.
func (m *SetDefaultPaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDefaultPaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPaymentId() <= 0 {
		err := SetDefaultPaymentRequestValidationError{
			field:  "PaymentId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProfileId() <= 0 {
		err := SetDefaultPaymentRequestValidationError{
			field:  "ProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetDefaultPaymentRequestMultiError(errors)
	}

	return nil
}

// SetDefaultPaymentRequestMultiError is an error wrapping multiple validation
// errors returned by SetDefaultPaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type SetDefaultPaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDefaultPaymentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDefaultPaymentRequestMultiError) AllErrors() []error { return m }

// SetDefaultPaymentRequestValidationError is the validation error returned by
// SetDefaultPaymentRequest.Validate if the designated constraints aren't met.
type SetDefaultPaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultPaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultPaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultPaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultPaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultPaymentRequestValidationError) ErrorName() string {
	return "SetDefaultPaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultPaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultPaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultPaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultPaymentRequestValidationError{}
