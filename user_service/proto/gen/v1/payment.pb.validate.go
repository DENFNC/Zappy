// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: payment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PaymentMethod with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaymentMethod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentMethod with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaymentMethodMultiError, or
// nil if none found.
func (m *PaymentMethod) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentMethod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	if m.GetProfileId() <= 0 {
		err := PaymentMethodValidationError{
			field:  "ProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPaymentToken()); l < 1 || l > 255 {
		err := PaymentMethodValidationError{
			field:  "PaymentToken",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsDefault

	if len(errors) > 0 {
		return PaymentMethodMultiError(errors)
	}

	return nil
}

// PaymentMethodMultiError is an error wrapping multiple validation errors
// returned by PaymentMethod.ValidateAll() if the designated constraints
// aren't met.
type PaymentMethodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMethodMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMethodMultiError) AllErrors() []error { return m }

// PaymentMethodValidationError is the validation error returned by
// PaymentMethod.Validate if the designated constraints aren't met.
type PaymentMethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMethodValidationError) ErrorName() string { return "PaymentMethodValidationError" }

// Error satisfies the builtin error interface
func (e PaymentMethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMethodValidationError{}

// Validate checks the field values on CreatePaymentMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentMethodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentMethodRequestMultiError, or nil if none found.
func (m *CreatePaymentMethodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentMethodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaymentMethod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePaymentMethodRequestValidationError{
					field:  "PaymentMethod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePaymentMethodRequestValidationError{
					field:  "PaymentMethod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentMethod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePaymentMethodRequestValidationError{
				field:  "PaymentMethod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePaymentMethodRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentMethodRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePaymentMethodRequest.ValidateAll() if
// the designated constraints aren't met.
type CreatePaymentMethodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentMethodRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentMethodRequestMultiError) AllErrors() []error { return m }

// CreatePaymentMethodRequestValidationError is the validation error returned
// by CreatePaymentMethodRequest.Validate if the designated constraints aren't met.
type CreatePaymentMethodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentMethodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentMethodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentMethodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentMethodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentMethodRequestValidationError) ErrorName() string {
	return "CreatePaymentMethodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentMethodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentMethodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentMethodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentMethodRequestValidationError{}

// Validate checks the field values on GetPaymentMethodRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentMethodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentMethodRequestMultiError, or nil if none found.
func (m *GetPaymentMethodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentMethodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPaymentId() <= 0 {
		err := GetPaymentMethodRequestValidationError{
			field:  "PaymentId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPaymentMethodRequestMultiError(errors)
	}

	return nil
}

// GetPaymentMethodRequestMultiError is an error wrapping multiple validation
// errors returned by GetPaymentMethodRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPaymentMethodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentMethodRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentMethodRequestMultiError) AllErrors() []error { return m }

// GetPaymentMethodRequestValidationError is the validation error returned by
// GetPaymentMethodRequest.Validate if the designated constraints aren't met.
type GetPaymentMethodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentMethodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentMethodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentMethodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentMethodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentMethodRequestValidationError) ErrorName() string {
	return "GetPaymentMethodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentMethodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentMethodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentMethodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentMethodRequestValidationError{}

// Validate checks the field values on UpdatePaymentMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePaymentMethodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePaymentMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePaymentMethodRequestMultiError, or nil if none found.
func (m *UpdatePaymentMethodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePaymentMethodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaymentMethod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePaymentMethodRequestValidationError{
					field:  "PaymentMethod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePaymentMethodRequestValidationError{
					field:  "PaymentMethod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentMethod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePaymentMethodRequestValidationError{
				field:  "PaymentMethod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePaymentMethodRequestMultiError(errors)
	}

	return nil
}

// UpdatePaymentMethodRequestMultiError is an error wrapping multiple
// validation errors returned by UpdatePaymentMethodRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdatePaymentMethodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePaymentMethodRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePaymentMethodRequestMultiError) AllErrors() []error { return m }

// UpdatePaymentMethodRequestValidationError is the validation error returned
// by UpdatePaymentMethodRequest.Validate if the designated constraints aren't met.
type UpdatePaymentMethodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePaymentMethodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePaymentMethodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePaymentMethodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePaymentMethodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePaymentMethodRequestValidationError) ErrorName() string {
	return "UpdatePaymentMethodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePaymentMethodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePaymentMethodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePaymentMethodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePaymentMethodRequestValidationError{}

// Validate checks the field values on DeletePaymentMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePaymentMethodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePaymentMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePaymentMethodRequestMultiError, or nil if none found.
func (m *DeletePaymentMethodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePaymentMethodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPaymentId() <= 0 {
		err := DeletePaymentMethodRequestValidationError{
			field:  "PaymentId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeletePaymentMethodRequestMultiError(errors)
	}

	return nil
}

// DeletePaymentMethodRequestMultiError is an error wrapping multiple
// validation errors returned by DeletePaymentMethodRequest.ValidateAll() if
// the designated constraints aren't met.
type DeletePaymentMethodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePaymentMethodRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePaymentMethodRequestMultiError) AllErrors() []error { return m }

// DeletePaymentMethodRequestValidationError is the validation error returned
// by DeletePaymentMethodRequest.Validate if the designated constraints aren't met.
type DeletePaymentMethodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePaymentMethodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePaymentMethodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePaymentMethodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePaymentMethodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePaymentMethodRequestValidationError) ErrorName() string {
	return "DeletePaymentMethodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePaymentMethodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePaymentMethodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePaymentMethodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePaymentMethodRequestValidationError{}

// Validate checks the field values on ListPaymentMethodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPaymentMethodsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPaymentMethodsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPaymentMethodsRequestMultiError, or nil if none found.
func (m *ListPaymentMethodsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPaymentMethodsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProfileId() <= 0 {
		err := ListPaymentMethodsRequestValidationError{
			field:  "ProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListPaymentMethodsRequestMultiError(errors)
	}

	return nil
}

// ListPaymentMethodsRequestMultiError is an error wrapping multiple validation
// errors returned by ListPaymentMethodsRequest.ValidateAll() if the
// designated constraints aren't met.
type ListPaymentMethodsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPaymentMethodsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPaymentMethodsRequestMultiError) AllErrors() []error { return m }

// ListPaymentMethodsRequestValidationError is the validation error returned by
// ListPaymentMethodsRequest.Validate if the designated constraints aren't met.
type ListPaymentMethodsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPaymentMethodsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPaymentMethodsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPaymentMethodsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPaymentMethodsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPaymentMethodsRequestValidationError) ErrorName() string {
	return "ListPaymentMethodsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPaymentMethodsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPaymentMethodsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPaymentMethodsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPaymentMethodsRequestValidationError{}

// Validate checks the field values on ListPaymentMethodsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPaymentMethodsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPaymentMethodsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPaymentMethodsResponseMultiError, or nil if none found.
func (m *ListPaymentMethodsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPaymentMethodsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPaymentMethods() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPaymentMethodsResponseValidationError{
						field:  fmt.Sprintf("PaymentMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPaymentMethodsResponseValidationError{
						field:  fmt.Sprintf("PaymentMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPaymentMethodsResponseValidationError{
					field:  fmt.Sprintf("PaymentMethods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPaymentMethodsResponseMultiError(errors)
	}

	return nil
}

// ListPaymentMethodsResponseMultiError is an error wrapping multiple
// validation errors returned by ListPaymentMethodsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListPaymentMethodsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPaymentMethodsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPaymentMethodsResponseMultiError) AllErrors() []error { return m }

// ListPaymentMethodsResponseValidationError is the validation error returned
// by ListPaymentMethodsResponse.Validate if the designated constraints aren't met.
type ListPaymentMethodsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPaymentMethodsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPaymentMethodsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPaymentMethodsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPaymentMethodsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPaymentMethodsResponseValidationError) ErrorName() string {
	return "ListPaymentMethodsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPaymentMethodsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPaymentMethodsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPaymentMethodsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPaymentMethodsResponseValidationError{}
