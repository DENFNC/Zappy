// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: shipping.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ShippingAddress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShippingAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShippingAddress with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShippingAddressMultiError, or nil if none found.
func (m *ShippingAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *ShippingAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AddressId

	if m.GetProfileId() <= 0 {
		err := ShippingAddressValidationError{
			field:  "ProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCountry()); l < 1 || l > 50 {
		err := ShippingAddressValidationError{
			field:  "Country",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCity()); l < 1 || l > 50 {
		err := ShippingAddressValidationError{
			field:  "City",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetStreet()); l < 1 || l > 100 {
		err := ShippingAddressValidationError{
			field:  "Street",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPostalCode()); l < 1 || l > 20 {
		err := ShippingAddressValidationError{
			field:  "PostalCode",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsDefault

	if len(errors) > 0 {
		return ShippingAddressMultiError(errors)
	}

	return nil
}

// ShippingAddressMultiError is an error wrapping multiple validation errors
// returned by ShippingAddress.ValidateAll() if the designated constraints
// aren't met.
type ShippingAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShippingAddressMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShippingAddressMultiError) AllErrors() []error { return m }

// ShippingAddressValidationError is the validation error returned by
// ShippingAddress.Validate if the designated constraints aren't met.
type ShippingAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShippingAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShippingAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShippingAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShippingAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShippingAddressValidationError) ErrorName() string { return "ShippingAddressValidationError" }

// Error satisfies the builtin error interface
func (e ShippingAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShippingAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShippingAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShippingAddressValidationError{}

// Validate checks the field values on CreateShippingAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShippingAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShippingAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShippingAddressRequestMultiError, or nil if none found.
func (m *CreateShippingAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShippingAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShippingAddressRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShippingAddressRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShippingAddressRequestValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShippingAddressRequestMultiError(errors)
	}

	return nil
}

// CreateShippingAddressRequestMultiError is an error wrapping multiple
// validation errors returned by CreateShippingAddressRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateShippingAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShippingAddressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShippingAddressRequestMultiError) AllErrors() []error { return m }

// CreateShippingAddressRequestValidationError is the validation error returned
// by CreateShippingAddressRequest.Validate if the designated constraints
// aren't met.
type CreateShippingAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShippingAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShippingAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShippingAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShippingAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShippingAddressRequestValidationError) ErrorName() string {
	return "CreateShippingAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShippingAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShippingAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShippingAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShippingAddressRequestValidationError{}

// Validate checks the field values on GetShippingAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShippingAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShippingAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShippingAddressRequestMultiError, or nil if none found.
func (m *GetShippingAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShippingAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAddressId() <= 0 {
		err := GetShippingAddressRequestValidationError{
			field:  "AddressId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetShippingAddressRequestMultiError(errors)
	}

	return nil
}

// GetShippingAddressRequestMultiError is an error wrapping multiple validation
// errors returned by GetShippingAddressRequest.ValidateAll() if the
// designated constraints aren't met.
type GetShippingAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShippingAddressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShippingAddressRequestMultiError) AllErrors() []error { return m }

// GetShippingAddressRequestValidationError is the validation error returned by
// GetShippingAddressRequest.Validate if the designated constraints aren't met.
type GetShippingAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShippingAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShippingAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShippingAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShippingAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShippingAddressRequestValidationError) ErrorName() string {
	return "GetShippingAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShippingAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShippingAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShippingAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShippingAddressRequestValidationError{}

// Validate checks the field values on UpdateShippingAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShippingAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShippingAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShippingAddressRequestMultiError, or nil if none found.
func (m *UpdateShippingAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShippingAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateShippingAddressRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateShippingAddressRequestValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateShippingAddressRequestValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateShippingAddressRequestMultiError(errors)
	}

	return nil
}

// UpdateShippingAddressRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateShippingAddressRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateShippingAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShippingAddressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShippingAddressRequestMultiError) AllErrors() []error { return m }

// UpdateShippingAddressRequestValidationError is the validation error returned
// by UpdateShippingAddressRequest.Validate if the designated constraints
// aren't met.
type UpdateShippingAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShippingAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShippingAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShippingAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShippingAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShippingAddressRequestValidationError) ErrorName() string {
	return "UpdateShippingAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShippingAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShippingAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShippingAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShippingAddressRequestValidationError{}

// Validate checks the field values on DeleteShippingAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteShippingAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShippingAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShippingAddressRequestMultiError, or nil if none found.
func (m *DeleteShippingAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShippingAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAddressId() <= 0 {
		err := DeleteShippingAddressRequestValidationError{
			field:  "AddressId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteShippingAddressRequestMultiError(errors)
	}

	return nil
}

// DeleteShippingAddressRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteShippingAddressRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteShippingAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShippingAddressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShippingAddressRequestMultiError) AllErrors() []error { return m }

// DeleteShippingAddressRequestValidationError is the validation error returned
// by DeleteShippingAddressRequest.Validate if the designated constraints
// aren't met.
type DeleteShippingAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShippingAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShippingAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShippingAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShippingAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShippingAddressRequestValidationError) ErrorName() string {
	return "DeleteShippingAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShippingAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShippingAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShippingAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShippingAddressRequestValidationError{}

// Validate checks the field values on ListShippingAddressesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListShippingAddressesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShippingAddressesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShippingAddressesRequestMultiError, or nil if none found.
func (m *ListShippingAddressesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShippingAddressesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProfileId() <= 0 {
		err := ListShippingAddressesRequestValidationError{
			field:  "ProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListShippingAddressesRequestMultiError(errors)
	}

	return nil
}

// ListShippingAddressesRequestMultiError is an error wrapping multiple
// validation errors returned by ListShippingAddressesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListShippingAddressesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShippingAddressesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShippingAddressesRequestMultiError) AllErrors() []error { return m }

// ListShippingAddressesRequestValidationError is the validation error returned
// by ListShippingAddressesRequest.Validate if the designated constraints
// aren't met.
type ListShippingAddressesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShippingAddressesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShippingAddressesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShippingAddressesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShippingAddressesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShippingAddressesRequestValidationError) ErrorName() string {
	return "ListShippingAddressesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListShippingAddressesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShippingAddressesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShippingAddressesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShippingAddressesRequestValidationError{}

// Validate checks the field values on ListShippingAddressesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListShippingAddressesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShippingAddressesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListShippingAddressesResponseMultiError, or nil if none found.
func (m *ListShippingAddressesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShippingAddressesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListShippingAddressesResponseValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListShippingAddressesResponseValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListShippingAddressesResponseValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListShippingAddressesResponseMultiError(errors)
	}

	return nil
}

// ListShippingAddressesResponseMultiError is an error wrapping multiple
// validation errors returned by ListShippingAddressesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListShippingAddressesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShippingAddressesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShippingAddressesResponseMultiError) AllErrors() []error { return m }

// ListShippingAddressesResponseValidationError is the validation error
// returned by ListShippingAddressesResponse.Validate if the designated
// constraints aren't met.
type ListShippingAddressesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShippingAddressesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShippingAddressesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShippingAddressesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShippingAddressesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShippingAddressesResponseValidationError) ErrorName() string {
	return "ListShippingAddressesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListShippingAddressesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShippingAddressesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShippingAddressesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShippingAddressesResponseValidationError{}
