// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: wishlist.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on WishlistItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WishlistItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WishlistItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WishlistItemMultiError, or
// nil if none found.
func (m *WishlistItem) ValidateAll() error {
	return m.validate(true)
}

func (m *WishlistItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ItemId

	if m.GetProfileId() <= 0 {
		err := WishlistItemValidationError{
			field:  "ProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductId() <= 0 {
		err := WishlistItemValidationError{
			field:  "ProductId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAddedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WishlistItemValidationError{
					field:  "AddedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WishlistItemValidationError{
					field:  "AddedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WishlistItemValidationError{
				field:  "AddedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsActive

	if len(errors) > 0 {
		return WishlistItemMultiError(errors)
	}

	return nil
}

// WishlistItemMultiError is an error wrapping multiple validation errors
// returned by WishlistItem.ValidateAll() if the designated constraints aren't met.
type WishlistItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WishlistItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WishlistItemMultiError) AllErrors() []error { return m }

// WishlistItemValidationError is the validation error returned by
// WishlistItem.Validate if the designated constraints aren't met.
type WishlistItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WishlistItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WishlistItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WishlistItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WishlistItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WishlistItemValidationError) ErrorName() string { return "WishlistItemValidationError" }

// Error satisfies the builtin error interface
func (e WishlistItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWishlistItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WishlistItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WishlistItemValidationError{}

// Validate checks the field values on CreateWishlistItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWishlistItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWishlistItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWishlistItemRequestMultiError, or nil if none found.
func (m *CreateWishlistItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWishlistItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWishlistItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWishlistItemRequestValidationError{
					field:  "WishlistItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWishlistItemRequestValidationError{
					field:  "WishlistItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWishlistItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWishlistItemRequestValidationError{
				field:  "WishlistItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWishlistItemRequestMultiError(errors)
	}

	return nil
}

// CreateWishlistItemRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWishlistItemRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateWishlistItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWishlistItemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWishlistItemRequestMultiError) AllErrors() []error { return m }

// CreateWishlistItemRequestValidationError is the validation error returned by
// CreateWishlistItemRequest.Validate if the designated constraints aren't met.
type CreateWishlistItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWishlistItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWishlistItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWishlistItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWishlistItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWishlistItemRequestValidationError) ErrorName() string {
	return "CreateWishlistItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWishlistItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWishlistItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWishlistItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWishlistItemRequestValidationError{}

// Validate checks the field values on GetWishlistItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWishlistItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWishlistItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWishlistItemRequestMultiError, or nil if none found.
func (m *GetWishlistItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWishlistItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetItemId() <= 0 {
		err := GetWishlistItemRequestValidationError{
			field:  "ItemId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWishlistItemRequestMultiError(errors)
	}

	return nil
}

// GetWishlistItemRequestMultiError is an error wrapping multiple validation
// errors returned by GetWishlistItemRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWishlistItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWishlistItemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWishlistItemRequestMultiError) AllErrors() []error { return m }

// GetWishlistItemRequestValidationError is the validation error returned by
// GetWishlistItemRequest.Validate if the designated constraints aren't met.
type GetWishlistItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWishlistItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWishlistItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWishlistItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWishlistItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWishlistItemRequestValidationError) ErrorName() string {
	return "GetWishlistItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWishlistItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWishlistItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWishlistItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWishlistItemRequestValidationError{}

// Validate checks the field values on UpdateWishlistItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWishlistItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWishlistItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWishlistItemRequestMultiError, or nil if none found.
func (m *UpdateWishlistItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWishlistItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWishlistItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWishlistItemRequestValidationError{
					field:  "WishlistItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWishlistItemRequestValidationError{
					field:  "WishlistItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWishlistItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWishlistItemRequestValidationError{
				field:  "WishlistItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWishlistItemRequestMultiError(errors)
	}

	return nil
}

// UpdateWishlistItemRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWishlistItemRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateWishlistItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWishlistItemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWishlistItemRequestMultiError) AllErrors() []error { return m }

// UpdateWishlistItemRequestValidationError is the validation error returned by
// UpdateWishlistItemRequest.Validate if the designated constraints aren't met.
type UpdateWishlistItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWishlistItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWishlistItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWishlistItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWishlistItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWishlistItemRequestValidationError) ErrorName() string {
	return "UpdateWishlistItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWishlistItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWishlistItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWishlistItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWishlistItemRequestValidationError{}

// Validate checks the field values on DeleteWishlistItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWishlistItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWishlistItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWishlistItemRequestMultiError, or nil if none found.
func (m *DeleteWishlistItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWishlistItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetItemId() <= 0 {
		err := DeleteWishlistItemRequestValidationError{
			field:  "ItemId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteWishlistItemRequestMultiError(errors)
	}

	return nil
}

// DeleteWishlistItemRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteWishlistItemRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteWishlistItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWishlistItemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWishlistItemRequestMultiError) AllErrors() []error { return m }

// DeleteWishlistItemRequestValidationError is the validation error returned by
// DeleteWishlistItemRequest.Validate if the designated constraints aren't met.
type DeleteWishlistItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWishlistItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWishlistItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWishlistItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWishlistItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWishlistItemRequestValidationError) ErrorName() string {
	return "DeleteWishlistItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWishlistItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWishlistItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWishlistItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWishlistItemRequestValidationError{}

// Validate checks the field values on ListWishlistItemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWishlistItemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWishlistItemsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWishlistItemsRequestMultiError, or nil if none found.
func (m *ListWishlistItemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWishlistItemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProfileId() <= 0 {
		err := ListWishlistItemsRequestValidationError{
			field:  "ProfileId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListWishlistItemsRequestMultiError(errors)
	}

	return nil
}

// ListWishlistItemsRequestMultiError is an error wrapping multiple validation
// errors returned by ListWishlistItemsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWishlistItemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWishlistItemsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWishlistItemsRequestMultiError) AllErrors() []error { return m }

// ListWishlistItemsRequestValidationError is the validation error returned by
// ListWishlistItemsRequest.Validate if the designated constraints aren't met.
type ListWishlistItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWishlistItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWishlistItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWishlistItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWishlistItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWishlistItemsRequestValidationError) ErrorName() string {
	return "ListWishlistItemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWishlistItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWishlistItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWishlistItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWishlistItemsRequestValidationError{}
