// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: hook_common/v1/object_storage_event.proto

package resources

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ObjectStorageRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectStorageRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectStorageRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectStorageRecordMultiError, or nil if none found.
func (m *ObjectStorageRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectStorageRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetS3()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectStorageRecordValidationError{
					field:  "S3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectStorageRecordValidationError{
					field:  "S3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetS3()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectStorageRecordValidationError{
				field:  "S3",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectStorageRecordMultiError(errors)
	}

	return nil
}

// ObjectStorageRecordMultiError is an error wrapping multiple validation
// errors returned by ObjectStorageRecord.ValidateAll() if the designated
// constraints aren't met.
type ObjectStorageRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectStorageRecordMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectStorageRecordMultiError) AllErrors() []error { return m }

// ObjectStorageRecordValidationError is the validation error returned by
// ObjectStorageRecord.Validate if the designated constraints aren't met.
type ObjectStorageRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectStorageRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectStorageRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectStorageRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectStorageRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectStorageRecordValidationError) ErrorName() string {
	return "ObjectStorageRecordValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectStorageRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectStorageRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectStorageRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectStorageRecordValidationError{}

// Validate checks the field values on ObjectStorageS3 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ObjectStorageS3) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectStorageS3 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectStorageS3MultiError, or nil if none found.
func (m *ObjectStorageS3) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectStorageS3) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBucket()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectStorageS3ValidationError{
					field:  "Bucket",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectStorageS3ValidationError{
					field:  "Bucket",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBucket()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectStorageS3ValidationError{
				field:  "Bucket",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectStorageS3ValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectStorageS3ValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectStorageS3ValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectStorageS3MultiError(errors)
	}

	return nil
}

// ObjectStorageS3MultiError is an error wrapping multiple validation errors
// returned by ObjectStorageS3.ValidateAll() if the designated constraints
// aren't met.
type ObjectStorageS3MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectStorageS3MultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectStorageS3MultiError) AllErrors() []error { return m }

// ObjectStorageS3ValidationError is the validation error returned by
// ObjectStorageS3.Validate if the designated constraints aren't met.
type ObjectStorageS3ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectStorageS3ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectStorageS3ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectStorageS3ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectStorageS3ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectStorageS3ValidationError) ErrorName() string { return "ObjectStorageS3ValidationError" }

// Error satisfies the builtin error interface
func (e ObjectStorageS3ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectStorageS3.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectStorageS3ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectStorageS3ValidationError{}

// Validate checks the field values on ObjectStorageBucket with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectStorageBucket) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectStorageBucket with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectStorageBucketMultiError, or nil if none found.
func (m *ObjectStorageBucket) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectStorageBucket) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Arn

	if len(errors) > 0 {
		return ObjectStorageBucketMultiError(errors)
	}

	return nil
}

// ObjectStorageBucketMultiError is an error wrapping multiple validation
// errors returned by ObjectStorageBucket.ValidateAll() if the designated
// constraints aren't met.
type ObjectStorageBucketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectStorageBucketMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectStorageBucketMultiError) AllErrors() []error { return m }

// ObjectStorageBucketValidationError is the validation error returned by
// ObjectStorageBucket.Validate if the designated constraints aren't met.
type ObjectStorageBucketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectStorageBucketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectStorageBucketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectStorageBucketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectStorageBucketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectStorageBucketValidationError) ErrorName() string {
	return "ObjectStorageBucketValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectStorageBucketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectStorageBucket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectStorageBucketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectStorageBucketValidationError{}

// Validate checks the field values on ObjectStorageObject with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectStorageObject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectStorageObject with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectStorageObjectMultiError, or nil if none found.
func (m *ObjectStorageObject) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectStorageObject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Size

	// no validation rules for ContentType

	if len(errors) > 0 {
		return ObjectStorageObjectMultiError(errors)
	}

	return nil
}

// ObjectStorageObjectMultiError is an error wrapping multiple validation
// errors returned by ObjectStorageObject.ValidateAll() if the designated
// constraints aren't met.
type ObjectStorageObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectStorageObjectMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectStorageObjectMultiError) AllErrors() []error { return m }

// ObjectStorageObjectValidationError is the validation error returned by
// ObjectStorageObject.Validate if the designated constraints aren't met.
type ObjectStorageObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectStorageObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectStorageObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectStorageObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectStorageObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectStorageObjectValidationError) ErrorName() string {
	return "ObjectStorageObjectValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectStorageObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectStorageObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectStorageObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectStorageObjectValidationError{}

// Validate checks the field values on MessageFields with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MessageFields) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageFields with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MessageFieldsMultiError, or
// nil if none found.
func (m *MessageFields) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageFields) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DetectedContentType

	// no validation rules for Message

	// no validation rules for Key

	// no validation rules for Valid

	if len(errors) > 0 {
		return MessageFieldsMultiError(errors)
	}

	return nil
}

// MessageFieldsMultiError is an error wrapping multiple validation errors
// returned by MessageFields.ValidateAll() if the designated constraints
// aren't met.
type MessageFieldsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageFieldsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageFieldsMultiError) AllErrors() []error { return m }

// MessageFieldsValidationError is the validation error returned by
// MessageFields.Validate if the designated constraints aren't met.
type MessageFieldsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageFieldsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageFieldsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageFieldsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageFieldsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageFieldsValidationError) ErrorName() string { return "MessageFieldsValidationError" }

// Error satisfies the builtin error interface
func (e MessageFieldsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageFields.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageFieldsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageFieldsValidationError{}
