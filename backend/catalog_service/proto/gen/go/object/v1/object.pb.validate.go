// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: object/v1/object.proto

package hooks

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on
// WebHookServiceCheckMimeObjectStorageRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WebHookServiceCheckMimeObjectStorageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WebHookServiceCheckMimeObjectStorageRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// WebHookServiceCheckMimeObjectStorageRequestMultiError, or nil if none found.
func (m *WebHookServiceCheckMimeObjectStorageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WebHookServiceCheckMimeObjectStorageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventName

	// no validation rules for Key

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WebHookServiceCheckMimeObjectStorageRequestValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WebHookServiceCheckMimeObjectStorageRequestValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WebHookServiceCheckMimeObjectStorageRequestValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WebHookServiceCheckMimeObjectStorageRequestMultiError(errors)
	}

	return nil
}

// WebHookServiceCheckMimeObjectStorageRequestMultiError is an error wrapping
// multiple validation errors returned by
// WebHookServiceCheckMimeObjectStorageRequest.ValidateAll() if the designated
// constraints aren't met.
type WebHookServiceCheckMimeObjectStorageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebHookServiceCheckMimeObjectStorageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebHookServiceCheckMimeObjectStorageRequestMultiError) AllErrors() []error { return m }

// WebHookServiceCheckMimeObjectStorageRequestValidationError is the validation
// error returned by WebHookServiceCheckMimeObjectStorageRequest.Validate if
// the designated constraints aren't met.
type WebHookServiceCheckMimeObjectStorageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebHookServiceCheckMimeObjectStorageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebHookServiceCheckMimeObjectStorageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebHookServiceCheckMimeObjectStorageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebHookServiceCheckMimeObjectStorageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebHookServiceCheckMimeObjectStorageRequestValidationError) ErrorName() string {
	return "WebHookServiceCheckMimeObjectStorageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WebHookServiceCheckMimeObjectStorageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebHookServiceCheckMimeObjectStorageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebHookServiceCheckMimeObjectStorageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebHookServiceCheckMimeObjectStorageRequestValidationError{}

// Validate checks the field values on
// WebHookServiceCheckMimeObjectStorageResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WebHookServiceCheckMimeObjectStorageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WebHookServiceCheckMimeObjectStorageResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// WebHookServiceCheckMimeObjectStorageResponseMultiError, or nil if none found.
func (m *WebHookServiceCheckMimeObjectStorageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WebHookServiceCheckMimeObjectStorageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DetectedContentType

	// no validation rules for Message

	// no validation rules for Valid

	if len(errors) > 0 {
		return WebHookServiceCheckMimeObjectStorageResponseMultiError(errors)
	}

	return nil
}

// WebHookServiceCheckMimeObjectStorageResponseMultiError is an error wrapping
// multiple validation errors returned by
// WebHookServiceCheckMimeObjectStorageResponse.ValidateAll() if the
// designated constraints aren't met.
type WebHookServiceCheckMimeObjectStorageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebHookServiceCheckMimeObjectStorageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebHookServiceCheckMimeObjectStorageResponseMultiError) AllErrors() []error { return m }

// WebHookServiceCheckMimeObjectStorageResponseValidationError is the
// validation error returned by
// WebHookServiceCheckMimeObjectStorageResponse.Validate if the designated
// constraints aren't met.
type WebHookServiceCheckMimeObjectStorageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebHookServiceCheckMimeObjectStorageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebHookServiceCheckMimeObjectStorageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebHookServiceCheckMimeObjectStorageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebHookServiceCheckMimeObjectStorageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebHookServiceCheckMimeObjectStorageResponseValidationError) ErrorName() string {
	return "WebHookServiceCheckMimeObjectStorageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WebHookServiceCheckMimeObjectStorageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebHookServiceCheckMimeObjectStorageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebHookServiceCheckMimeObjectStorageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebHookServiceCheckMimeObjectStorageResponseValidationError{}
