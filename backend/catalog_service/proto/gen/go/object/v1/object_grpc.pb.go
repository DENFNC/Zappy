// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: object/v1/object.proto

package hooks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WebHookService_CheckMimeObjectStorage_FullMethodName = "/object.v1.WebHookService/CheckMimeObjectStorage"
)

// WebHookServiceClient is the client API for WebHookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebHookServiceClient interface {
	CheckMimeObjectStorage(ctx context.Context, in *WebHookServiceCheckMimeObjectStorageRequest, opts ...grpc.CallOption) (*WebHookServiceCheckMimeObjectStorageResponse, error)
}

type webHookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebHookServiceClient(cc grpc.ClientConnInterface) WebHookServiceClient {
	return &webHookServiceClient{cc}
}

func (c *webHookServiceClient) CheckMimeObjectStorage(ctx context.Context, in *WebHookServiceCheckMimeObjectStorageRequest, opts ...grpc.CallOption) (*WebHookServiceCheckMimeObjectStorageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WebHookServiceCheckMimeObjectStorageResponse)
	err := c.cc.Invoke(ctx, WebHookService_CheckMimeObjectStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebHookServiceServer is the server API for WebHookService service.
// All implementations must embed UnimplementedWebHookServiceServer
// for forward compatibility.
type WebHookServiceServer interface {
	CheckMimeObjectStorage(context.Context, *WebHookServiceCheckMimeObjectStorageRequest) (*WebHookServiceCheckMimeObjectStorageResponse, error)
	mustEmbedUnimplementedWebHookServiceServer()
}

// UnimplementedWebHookServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWebHookServiceServer struct{}

func (UnimplementedWebHookServiceServer) CheckMimeObjectStorage(context.Context, *WebHookServiceCheckMimeObjectStorageRequest) (*WebHookServiceCheckMimeObjectStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMimeObjectStorage not implemented")
}
func (UnimplementedWebHookServiceServer) mustEmbedUnimplementedWebHookServiceServer() {}
func (UnimplementedWebHookServiceServer) testEmbeddedByValue()                        {}

// UnsafeWebHookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebHookServiceServer will
// result in compilation errors.
type UnsafeWebHookServiceServer interface {
	mustEmbedUnimplementedWebHookServiceServer()
}

func RegisterWebHookServiceServer(s grpc.ServiceRegistrar, srv WebHookServiceServer) {
	// If the following call pancis, it indicates UnimplementedWebHookServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WebHookService_ServiceDesc, srv)
}

func _WebHookService_CheckMimeObjectStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebHookServiceCheckMimeObjectStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebHookServiceServer).CheckMimeObjectStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebHookService_CheckMimeObjectStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebHookServiceServer).CheckMimeObjectStorage(ctx, req.(*WebHookServiceCheckMimeObjectStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebHookService_ServiceDesc is the grpc.ServiceDesc for WebHookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebHookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "object.v1.WebHookService",
	HandlerType: (*WebHookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckMimeObjectStorage",
			Handler:    _WebHookService_CheckMimeObjectStorage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "object/v1/object.proto",
}
