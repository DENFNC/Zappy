// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: product_image.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ProductImage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProductImage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductImage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProductImageMultiError, or
// nil if none found.
func (m *ProductImage) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductImage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ImageId

	// no validation rules for ProductId

	// no validation rules for Url

	// no validation rules for Alt

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductImageValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductImageValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductImageValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductImageValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductImageValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductImageValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProductImageMultiError(errors)
	}

	return nil
}

// ProductImageMultiError is an error wrapping multiple validation errors
// returned by ProductImage.ValidateAll() if the designated constraints aren't met.
type ProductImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductImageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductImageMultiError) AllErrors() []error { return m }

// ProductImageValidationError is the validation error returned by
// ProductImage.Validate if the designated constraints aren't met.
type ProductImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductImageValidationError) ErrorName() string { return "ProductImageValidationError" }

// Error satisfies the builtin error interface
func (e ProductImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductImageValidationError{}

// Validate checks the field values on UploadURLRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UploadURLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadURLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadURLRequestMultiError, or nil if none found.
func (m *UploadURLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadURLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for Filename

	// no validation rules for ContentType

	if len(errors) > 0 {
		return UploadURLRequestMultiError(errors)
	}

	return nil
}

// UploadURLRequestMultiError is an error wrapping multiple validation errors
// returned by UploadURLRequest.ValidateAll() if the designated constraints
// aren't met.
type UploadURLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadURLRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadURLRequestMultiError) AllErrors() []error { return m }

// UploadURLRequestValidationError is the validation error returned by
// UploadURLRequest.Validate if the designated constraints aren't met.
type UploadURLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadURLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadURLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadURLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadURLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadURLRequestValidationError) ErrorName() string { return "UploadURLRequestValidationError" }

// Error satisfies the builtin error interface
func (e UploadURLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadURLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadURLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadURLRequestValidationError{}

// Validate checks the field values on UploadURLResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UploadURLResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadURLResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadURLResponseMultiError, or nil if none found.
func (m *UploadURLResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadURLResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UploadUrl

	// no validation rules for ObjectKey

	if len(errors) > 0 {
		return UploadURLResponseMultiError(errors)
	}

	return nil
}

// UploadURLResponseMultiError is an error wrapping multiple validation errors
// returned by UploadURLResponse.ValidateAll() if the designated constraints
// aren't met.
type UploadURLResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadURLResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadURLResponseMultiError) AllErrors() []error { return m }

// UploadURLResponseValidationError is the validation error returned by
// UploadURLResponse.Validate if the designated constraints aren't met.
type UploadURLResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadURLResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadURLResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadURLResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadURLResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadURLResponseValidationError) ErrorName() string {
	return "UploadURLResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadURLResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadURLResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadURLResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadURLResponseValidationError{}
